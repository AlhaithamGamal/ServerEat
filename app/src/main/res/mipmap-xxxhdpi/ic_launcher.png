package com.example.mywhatsappclone;

import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ScrollView;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseAuth.AuthStateListener;
import com.google.firebase.database.ChildEventListener;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;
import com.google.firebase.storage.FirebaseStorage;
import com.google.firebase.storage.StorageReference;
import com.google.firebase.storage.UploadTask;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Iterator;

public class GroupChatActivity extends AppCompatActivity {
    private static final int RC_PHOTO_PICKER = 2;
    private static final int RC_SIGN_IN = 1;
    private ScrollView scrollViewGroup;
    private EditText groupMessage;
    private ImageButton groupImageButton, photoPickerButton;
    private TextView displayMessageGroup;
    private Toolbar toolbarGroup;
    private ChildEventListener mChildEventListener;
    AuthStateListener mAuthStateListener;
    private int color;
    ArrayList messages = new ArrayList();
    String currentGroupName, currentUserId, currentUserName, currentDate, currentTime;
    FirebaseAuth mAuth;
    RecyclerView rcv;
    private StorageReference mChatPhotosStorageReferences;
    private FirebaseStorage mFirebaseStorage;
    private FirebaseDatabase mFirebaseDatabase;
    DatabaseReference usersRef;
    DatabaseReference mMessageDatabaseReference;
    DatabaseReference groupNameRef;
    DatabaseReference groupMessageKeyRef;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_group_chat);
        currentGroupName = getIntent().getExtras().get("groupName").toString();
        mAuth = FirebaseAuth.getInstance();
        mFirebaseDatabase = FirebaseDatabase.getInstance();
        mMessageDatabaseReference = mFirebaseDatabase.getReference().child("Groups").child(currentGroupName);
        currentUserId = mAuth.getCurrentUser().getUid();
        mFirebaseStorage = FirebaseStorage.getInstance();
        mChatPhotosStorageReferences = mFirebaseStorage.getReference().child("chat_photos");

        usersRef = FirebaseDatabase.getInstance().getReference().child("Users");
        groupNameRef = FirebaseDatabase.getInstance().getReference().child("Groups").child(currentGroupName);
        initialization();
        getUserInfo();
        photoPickerButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
//                Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
//                intent.setType("image/jpeg");
//                intent.putExtra(Intent.EXTRA_LOCAL_ONLY, true);
//                startActivityForResult(Intent.createChooser(intent, "Complete action using"), RC_PHOTO_PICKER);
                Intent galleryIntent = new Intent();
                galleryIntent.setAction(Intent.ACTION_GET_CONTENT);
                galleryIntent.setType("image/*");
                startActivityForResult(galleryIntent, RC_PHOTO_PICKER);

            }
        });

        groupImageButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                saveMessageInfoToDatabase();
                groupMessage.setText("");
//               automatic scrool down messages
            }
        });
    }




    private void saveMessageInfoToDatabase() {
        String message = groupMessage.getText().toString();
        String messageKey = groupNameRef.push().getKey(); //create a key
        if (TextUtils.isEmpty(message)) {

            Toast.makeText(GroupChatActivity.this, "Please enter message here ....", Toast.LENGTH_SHORT).show();

        } else {
            Calendar calForDate = Calendar.getInstance();
            SimpleDateFormat currentDateFormat = new SimpleDateFormat("MMM dd,yyyy");
            currentDate = currentDateFormat.format(calForDate.getTime());

            Calendar calForTime = Calendar.getInstance();
            SimpleDateFormat currentTimeFormat = new SimpleDateFormat("hh:mm a");
            currentTime = currentTimeFormat.format(calForTime.getTime());
            HashMap<String, Object> groupMessageKey = new HashMap<>();
            groupNameRef.updateChildren(groupMessageKey); //created hash map to allow revcieve keys
            groupMessageKeyRef = groupNameRef.child(messageKey);
            HashMap<String, Object> messageInfoMap = new HashMap<>();
            messageInfoMap.put("name", currentUserName);
            messageInfoMap.put("message", message);
            messageInfoMap.put("date", currentDate);
            messageInfoMap.put("time", currentTime);
            groupMessageKeyRef.updateChildren(messageInfoMap);
            //     messages.add(new Messages(currentUserName,message,currentDate,currentTime));


        }

    }

    private void getUserInfo() {
        final String name = "name";
        usersRef.child(currentUserId).addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                if (dataSnapshot.exists()) {
                    currentUserName = dataSnapshot.child("name").getValue().toString();
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError databaseError) {

            }
        });
    }

    private void initialization() {
        toolbarGroup = (Toolbar) findViewById(R.id.group_chat_bar_layout_toolbar);
        setSupportActionBar(toolbarGroup);
        getSupportActionBar().setTitle(currentGroupName);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        getSupportActionBar().setHomeButtonEnabled(true);
        rcv = findViewById(R.id.recv);
        groupMessage = (EditText) findViewById(R.id.write_message_group);
        photoPickerButton = findViewById(R.id.photoPickerButton);
        groupImageButton = (ImageButton) findViewById(R.id.send_message_group);
//        displayMessageGroup = (TextView) findViewById(R.id.view_message_group);
//        scrollViewGroup = (ScrollView) findViewById(R.id.scrollview_group_chat);

    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {

        super.onCreateOptionsMenu(menu);
        getMenuInflater().inflate(R.menu.options_menu_two, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        super.onOptionsItemSelected(item);
        switch (item.getItemId()) {
            // Respond to the action bar's Up/Home button
            case android.R.id.home:
                super.onBackPressed();
                return true;
            case R.id.logout:
                mAuth.signOut();
                sendUserToLoginActivity();
            case R.id.profile:
                sendToSettings();
            case R.id.clear:
                clearChat();
        }
        return true;
    }

    private void clearChat() {


        groupNameRef.


    }





    @Override
    protected void onStart() {
        super.onStart();
        color = R.drawable.shapechatchange;
        groupNameRef.addChildEventListener(new ChildEventListener() {
            @Override
            public void onChildAdded(@NonNull DataSnapshot dataSnapshot, @Nullable String s) {
                if (dataSnapshot.exists()) {

                    displayMessages(dataSnapshot);
                }
            }

            @Override
            public void onChildChanged(@NonNull DataSnapshot dataSnapshot, @Nullable String s) {
                if (dataSnapshot.exists()) {

                    displayMessages(dataSnapshot);
                }
            }

            @Override
            public void